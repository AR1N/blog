{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{207:function(e,n,t){\"use strict\";t.r(n);var s=t(0),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h2\",{attrs:{id:\"技术栈\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#技术栈\"}},[e._v(\"#\")]),e._v(\" 技术栈\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"code\",[e._v(\"koa2\")])]),e._v(\" \"),t(\"li\",[t(\"code\",[e._v(\"koa-router\")])]),e._v(\" \"),t(\"li\",[t(\"code\",[e._v(\"mysql=>ORM(sequelize)\")])]),e._v(\" \"),t(\"li\",[t(\"code\",[e._v(\"jsonwebtoken\")]),e._v(\"签发token\")]),e._v(\" \"),t(\"li\",[t(\"code\",[e._v(\"koa-jwt\")]),e._v(\"鉴权\")]),e._v(\" \"),t(\"li\",[t(\"code\",[e._v(\"crypto-js\")]),e._v(\"加密\")])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"起步\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#起步\"}},[e._v(\"#\")]),e._v(\" 起步\")]),e._v(\" \"),t(\"blockquote\",[t(\"ul\",[t(\"li\",[e._v(\"搭建一个简单的koa服务\")])])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    const Koa = require('koa')\\n    const app = new Koa() \\n    app.listen(3000, () => {\\n        console.info('koa服务已启动~')\\n    }) \\n\")])])]),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"解决跨域问题\")])])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    const cors = require('koa2-cors') \\n    app.use(cors({\\n        origin: function (ctx) { \\n            return 'http://localhost:8080'; // 允许 http://localhost:8080 这个域名的请求\\n        },\\n        exposeHeaders: ['WWW-Authenticate', 'Server-Authorization'],   \\n        maxAge: 5,\\n        credentials: true,\\n        allowMethods: ['GET', 'POST', 'DELETE', 'OPTIONS', 'PUT'],\\n        allowHeaders: ['Content-Type', 'Authorization', 'Accept']\\n    }));\\n\")])])]),t(\"ul\",[t(\"li\",[t(\"strong\",[e._v(\"获取请求参数\")])])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    const koabody = require('koa-body') \\n    app.use(koabody({\\n        multipart: true,\\n        formidable: {\\n            maxFileSize: 10 * 1024 * 1024  //设置上传文件大小最大限制，最大10M，默认2M\\n        }\\n    }))\\n\")])])]),t(\"blockquote\",[t(\"ul\",[t(\"li\",[t(\"p\",[t(\"code\",[e._v(\"get\")]),e._v(\"请求参数通过\"),t(\"code\",[e._v(\"ctx.query\")])])]),e._v(\" \"),t(\"li\",[t(\"p\",[t(\"code\",[e._v(\"post\")]),e._v(\"请求参数通过\"),t(\"code\",[e._v(\"ctx.request.body\")])])])])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"model（模型）\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#model（模型）\"}},[e._v(\"#\")]),e._v(\" MODEL（模型）\")]),e._v(\" \"),t(\"blockquote\",[t(\"ul\",[t(\"li\",[e._v(\"通过\"),t(\"code\",[e._v(\"sequelize\")]),e._v(\"来作\"),t(\"code\",[e._v(\"mysql\")]),e._v(\"的ORM\")])])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    //db.js\\n    const Sequelize = require('sequelize')\\n    const config = require('./config')//mysql相关配置\\n\\n    const sequelize = new Sequelize(config.sql.database, config.sql.username, config.sql.password, {\\n        host: config.sql.host, //数据库地址\\n        dialect: 'mysql', //指定连接的数据库类型\\n        pool: {\\n            max: 5, //连接池最大连接数量\\n            min: 0, //最小连接数量\\n            idle: 10000, //如果一个线程 10秒内没有被使用过的话，就释放\\n        },\\n        dialectOptions: {//格式化时间格式\\n            charset: 'utf8mb4',\\n            dateStrings: true,\\n            typeCast: true\\n        },\\n        timezone: '+08:00', //改为标准时区\\n        logging: false, // 执行过程会log一些SQL的logging，设为false不显示\\n    })\\n\\n    // sequelize.authenticate().then(()=>{\\n    //     console.log('测试成功')\\n    // }).catch(err=>{\\n    //     console.log(err)\\n    // })\\n    //  sequelize.sync({ force: true });  \\n    sequelize.sync();  \\n    console.log(\\\"所有模型均已成功同步.\\\"); \\n\\n    module.exports = sequelize\\n\")])])]),t(\"blockquote\",[t(\"ul\",[t(\"li\",[e._v(\"建立数据模型\")])])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    //userModel.js\\n    const { Sequelize, DataTypes } = require('sequelize')\\n    const sequelizeDB = require('./db')\\n\\n    const User = sequelizeDB.define('user', {\\n        id:{\\n            type: Sequelize.INTEGER(255),\\n            primaryKey: true,            // 主键\\n            autoIncrement: true,         // 自动递增\\n            unique: true\\n        },\\n        account:{\\n            type: Sequelize.STRING(10),\\n            unique: true,\\n            validate: {\\n                // 限制长度范围\\n                min: 3,\\n                max: 15\\n            },\\n        },\\n        username: {\\n            type: Sequelize.STRING(10),\\n            allowNull: false\\n            // unique: true\\n        },\\n        password: {\\n            type:Sequelize.STRING(255),\\n            allowNull: false\\n        }\\n    }, \\n    { \\n        // tableName: 'user',//对应表名\\n        freezeTableName: true,\\n        timestamps: true\\n    });\\n    //timestamp字段，默认为true，表示数据库中是否会自动更新createdAt和updatedAt字段，false表示不会增加这个字段。\\n    //freezeTableName,为true, 参数停止 Sequelize 执行自动复数化.\\n\\n    //创建表，默认是false，true则是删除原有表，再创建\\n    //  User.sync({ \\n    //     force: false \\n    // });\\n\\n    module.exports = User; \\n\")])])]),t(\"h2\",{attrs:{id:\"router（路由）\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#router（路由）\"}},[e._v(\"#\")]),e._v(\" Router（路由）\")]),e._v(\" \"),t(\"blockquote\",[t(\"ul\",[t(\"li\",[t(\"p\",[e._v(\"路由分为通用无需权限路由及受保护的需权限路由\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"受保护路由通过JWT中间件来限制\")])])])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    const Router = require('koa-router')\\n    const koajwt = require('koa-jwt')\\n    const jwt = require('jsonwebtoken')\\n    const userDB = require('./models/userModel')\\n    const jwtKey = 'AREN_KEY'\\n\\n    const CommonRoute = new Router()//通用路由\\n    const ProtectedRoute = new Router()//受保护路由\\n\\n    //登录\\n    CommonRoute.post('/common/login',async (ctx,next)=>{\\n        const req = ctx.request.body\\n        const userData = await userDB.findOne({\\n           where:{account:req.account}\\n       })\\n        if(!userData){\\n             ctx.body = {\\n                 code:201,\\n                 msg:'账号不存在'\\n             }\\n             return\\n         }\\n        ctx.state = {user:userData}\\n        ctx.body= {//签发token\\n            code:1,\\n            data:{\\n                id:userData.id,\\n                account:userData.account,\\n                username:userData.username,\\n                token: jwt.sign({ id: userData.id }, jwtKey,{ expiresIn: '12h',issuer:'Aren'} )\\n            },\\n           msg:'登录成功'\\n        }\\n    })\\n    //用户信息\\n    ProtectedRoute.post('/user/item',async (ctx,next)=>{\\n       const query = ctx.query\\n        await userDB.findOne({\\n            where:{\\n                id:query.id\\n            },\\n            attributes: ['id', 'account', 'username']\\n        }).then(res=>{\\n            if(res){\\n                ctx.body = {\\n                    code: 1,\\n                    msg: '获取成功',\\n                    data:res\\n                }\\n            }else {\\n                ctx.body = {\\n                    code: 101,\\n                    msg: '记录不存在'\\n                }\\n            }\\n        })\\n    })\\n\\n    app.use(CommonRoute.routes()).use(CommonRoute.allowedMethods());\\n    app.use(koajwt({secret: jwtKey}));//鉴权\\n    app.use(ProtectedRoute.routes()).use(ProtectedRoute.allowedMethods());\\n\\n\")])])]),t(\"h2\",{attrs:{id:\"error（异常捕获-处理）\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#error（异常捕获-处理）\"}},[e._v(\"#\")]),e._v(\" Error（异常捕获/处理）\")]),e._v(\" \"),t(\"blockquote\",[t(\"ul\",[t(\"li\",[e._v(\"在入口统一处理错误\")])])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    app.use(async (ctx, next) => {\\n        let status = 0\\n        let errMsg = '发生未知错误'\\n        try {\\n            await next()\\n            status = ctx.status;\\n        } catch (err) {\\n            console.log(err)\\n            status =  err.statusCode || err.status || 500\\n            if(err.message){\\n                errMsg = err.message\\n            }\\n            if (err.message.startsWith('maxFileSize exceeded')){\\n                status = 406\\n                errMsg = '上传文件过大'\\n            }\\n            if(status == 401){\\n                errMsg = '无效令牌'\\n            }\\n        }\\n        ctx.response.status = 200\\n        if(status >= 400){\\n            if(status == 405){\\n            errMsg = 'Method Not Allowed'\\n           }\\n            ctx.body = {\\n                code:status,\\n                msg:errMsg\\n            }\\n        }\\n    })\\n\")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);","extractedComments":[]}